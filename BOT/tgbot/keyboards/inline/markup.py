from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from BOT.CONSTANTS import SUBJECTS
from BOT.tgbot.keyboards.inline.callback_data import (
    SubjectData,
    ArrowsData,
    CheckHomework,
    DatesData,
)


# | Registration | Registration | Registration | Registration | Registration | Registration | Registration | Registration |


markup_start = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Å—É –ø–æ id", callback_data="join_class_by_id"
            ),
            InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å", callback_data="make_class"),
        ],
    ]
)

markup_yes_or_no = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data="check_true"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="check_false"),
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")],
    ]
)

markup_check_subjects1 = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="Check_Subjects_okey")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")],
    ]
)
markup_check_subjects2 = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="Check_Subjects_undo")],
    ]
)
markup_shedule2 = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="shedule_done")]
    ]
)


def get_markup_shedule(subjects) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=3)
    for i in range(len(subjects)):
        keyboard.insert(
            InlineKeyboardButton(
                text=subjects[i],
                callback_data=SubjectData.new(name=subjects[i]),
            )
        )
    keyboard.add(
        InlineKeyboardButton(text="–í–≤–µ—Ä—Ö", callback_data=ArrowsData.new(num=-1)),
        InlineKeyboardButton(text="–í–Ω–∏–∑", callback_data=ArrowsData.new(num=1)),
    )
    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard


# | Student | Student | Student | Student | Student | Student | Student | Student |


markup_profile = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")],
    ]
)

markup_add_homework = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å", callback_data="fast_add")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –¥–∞—Ç—É", callback_data="on_date_add")],
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")],
    ]
)


def get_markup_student_menu(is_admin) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–∑üìå", callback_data="add_homework"),
                InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–∑üîç", callback_data="get_homework"),
            ],
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—åüë§", callback_data="profile")],
        ]
    )
    if is_admin:
        keyboard.add(InlineKeyboardButton(text="–ö–ª–∞—Å—Å‚≠êÔ∏è", callback_data="class_menu"))

    return keyboard


def get_markup_fast_add1(subjects) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=subjects[0], callback_data=SubjectData.new(name=subjects[0])
                )
            ],
            [
                InlineKeyboardButton(
                    text=subjects[1], callback_data=SubjectData.new(name=subjects[1])
                )
            ],
            [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")],
        ]
    )
    return keyboard


markup_check_homework = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data=CheckHomework.new(boolean="true")
            )
        ],
        [
            InlineKeyboardButton(
                text="–ù–µ—Ç", callback_data=CheckHomework.new(boolean="false")
            )
        ],
    ]
)
markup_done = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="done")],
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")],
    ]
)


def get_markup_dates(dates):
    keyboard = InlineKeyboardMarkup(row_width=3)
    for date in dates:
        keyboard.insert(
            InlineKeyboardButton(
                text=date[0],
                callback_data=DatesData.new(date=date[1]),
            )
        )
    keyboard.add(InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu"))
    return keyboard


def get_subjects_markup(subjects):
    keyboard = InlineKeyboardMarkup(row_width=3)
    for i in subjects:
        keyboard.insert(
            InlineKeyboardButton(
                text=i,
                callback_data=SubjectData.new(name=i),
            )
        )
    keyboard.add(InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu"))
    return keyboard


markup_are_u_sure = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="true")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="false")],
    ]
)

markup_get_homework = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="fast_get")],
        [InlineKeyboardButton(text="–ù–∞ –¥–∞—Ç—É", callback_data="on_date_get")],
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")],
    ]
)
