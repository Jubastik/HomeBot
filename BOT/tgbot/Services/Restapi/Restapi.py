# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ rest api (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await!)
# –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ç—ã—á–∫–∏ => —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ –∂–æ–ø—É, –Ω–∞–¥–æ –≤ –∫–æ–¥–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–µ–º –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å —é–∑–µ—Ä–æ–≤
import json
import requests
import random
import datetime
from CONSTANTS import URL_USER, URL_CLASS


# Tasks:
# !1) –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ is_student, is_admin, is_developer
# 2) add_user


async def is_student(tguser_id):
    # –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ
    try:
        query = f"/tg/{tguser_id}"
        res = requests.get(URL_USER + query)
        res = json.loads(res.text)
        return True
    except Exception:
        return False


async def is_unregistered(tguser_id):
    return not (await is_student(tguser_id))


async def is_admin(tguser_id):
    # –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ—Ç
    query = f"/tg/{tguser_id}"
    res = requests.get(URL_USER + query)
    res = json.loads(res.text)
    if res["is_admin"]:
        return True
    else:
        return False


async def is_developer(tguser_id):
    query = f"/tg/{tguser_id}"
    res = requests.get(URL_USER + query)
    res = json.loads(res.text)
    if res["is_superuser"]:
        return True
    else:
        return False


def register_user(tguser_id, classid):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –≤ –±–¥ –∫ –∫–ª–∞—Å—Å—É –ø–æ —Å—Å—ã–ª–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ False"""
    # —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = requests.post(
        URL_USER,
        json={
            "id": tguser_id,
            "platform": "tg",
            "class_token": classid,
            "name": "–û–ª–µ–≥",
        },
    )
    if response:
        return True
    else:
        return False


def register_class(tguser_id, data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –≤ –±–¥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ False"""
    # —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response = requests.post(
        URL_USER, json={"id": tguser_id, "platform": "tg", "name": "–û–ª–µ–≥"}
    )
    print(response)
    if not response:
        return False
    # —É–∂–µ –ø–æ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞
    response = requests.post(
        URL_CLASS,
        json={"creator_platform": "tg", "creator_id": tguser_id, "name": "10A"},
    )
    if not response:
        return False

    return True


async def get_subjects_by_time(date_time=datetime.datetime.now()) -> list():
    """–ü–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–∞–µ—Ç 2 –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞"""
    return ["–†—É—Å—Å–∫–∏–πüá∑üá∫", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞üìö"]  # –ó–∞—Ç—ã—á–∫–∞


async def is_lessons_in_saturday():
    """–î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –ë–î –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É—Ä–æ–∫–∏ –≤ —Å—É–±–±–æ—Ç—É"""
    return True


async def add_homework(tguser_id, data, auto=False):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–º–∞—à–∫—É, –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True"""
    # print(data)
    # print(auto)
    return True
